diff -BburpN libraries/TVout/TVout.cpp TVout-VE/TVout/TVout.cpp
--- libraries/TVout/TVout.cpp	2015-11-01 20:07:22.121720976 +0500
+++ TVout-VE/TVout/TVout.cpp	2011-01-08 03:34:08.000000000 +0500
@@ -97,18 +97,6 @@ char TVout::begin(uint8_t mode, uint8_t
 	TIMSK1 = 0;
 	free(screen);
 }
-/* Enable genlock
-*/
-void TVout::genlock() {
-    display.enable_genlock=0;
-}
-
-/* Select video clock
-*/
-void TVout::video_clock(uint8_t mode) {
-    select_clock(mode);
-}
-
 
 
 /* Fill the screen with some color.
@@ -130,7 +118,7 @@ void TVout::fill(uint8_t color) {
 			cursor_x = 0;
 			cursor_y = 0;
 			for (int i = 0; i < (display.hres)*display.vres; i++)
-				display.screen[i] = 0xAA;
+				display.screen[i] = 0xFF;
 			break;
 		case INVERT:
 			for (int i = 0; i < display.hres*display.vres; i++)
@@ -887,3 +875,20 @@ void TVout::noTone() {
 	TCCR2B = 0;
 	PORT_SND &= ~(_BV(SND_PIN)); //set pin 11 to 0
 } // end of noTone
+
+// BEGIN Video Experimenter
+void TVout::capture() {
+  captureFlag = 1;
+  while (captureFlag > 0);
+}
+
+void TVout::resume() {
+  resume_render();
+}
+
+void TVout::setDataCapture(int line, int wait, uint8_t *buf) {
+  dataCaptureLine = line;
+  dataCaptureWait = wait;
+  dataCaptureBuf = buf;
+}
+// END Video Experimenter
diff -BburpN libraries/TVout/TVout.h TVout-VE/TVout/TVout.h
--- libraries/TVout/TVout.h	2015-11-01 20:07:22.122720977 +0500
+++ TVout-VE/TVout/TVout.h	2010-12-29 21:54:00.000000000 +0500
@@ -76,8 +76,6 @@ public:
 	char begin(uint8_t mode);
 	char begin(uint8_t mode, uint8_t x, uint8_t y);
 	void end();
-    void genlock();
-    void video_clock(uint8_t mode);
     
 	//accessor functions
 	unsigned char hres();
@@ -115,6 +113,13 @@ public:
 	void tone(unsigned int frequency);
 	void noTone();
 	
+	// BEGIN Video Experimenter
+	void capture();
+	void resume();
+	void setDataCapture(int line, int wait, uint8_t *buf);
+	// END Video Experimenter
+
+
 //The following function definitions can be found in TVoutPrint.cpp
 //printing functions
 	void print_char(uint8_t x, uint8_t y, unsigned char c);
diff -BburpN libraries/TVout/video_gen.cpp TVout-VE/TVout/video_gen.cpp
--- libraries/TVout/video_gen.cpp	2015-11-01 20:07:22.123720979 +0500
+++ TVout-VE/TVout/video_gen.cpp	2011-02-06 01:30:20.000000000 +0500
@@ -43,9 +43,23 @@ void (*line_handler)();			//remove me
 void (*hbi_hook)() = &empty;
 void (*vbi_hook)() = &empty;
 
+// BEGIN Video Experimenter
+volatile char captureFlag = 0;
+void (*save_render_line)();
+int dataCaptureLine;
+int dataCaptureWait;
+uint8_t *dataCaptureBuf = 0;
+// END Video Experimenter
+
 // sound properties
 volatile long remainingToneVsyncs;
 
+// BEGIN Video Experimenter
+void resume_render() {
+  render_line = save_render_line;
+}
+// END Video Experimenter
+
 void empty() {}
 
 void render_setup(uint8_t mode, uint8_t x, uint8_t y, uint8_t *scrnptr) {
@@ -54,7 +68,6 @@ void render_setup(uint8_t mode, uint8_t
 	display.hres = x;
 	display.vres = y;
 	display.frames = 0;
-    display.video_mode=mode;
 
 	if (mode)
 		display.vscale_const = _PAL_LINE_DISPLAY/display.vres - 1;
@@ -72,6 +85,10 @@ void render_setup(uint8_t mode, uint8_t
 			break;
 		case 5:
 			render_line = &render_line5c;
+			//render_line = &renderACO_line5c;
+			// BEGIN Video Experimenter
+		        save_render_line = &render_line5c;
+			// END Video Experimenter
 			break;
 		case 4:
 			render_line = &render_line4c;
@@ -86,31 +103,18 @@ void render_setup(uint8_t mode, uint8_t
 				render_line = &render_line3c;
 	}
 
-    // Pin setup
+
 	DDR_VID |= _BV(VID_PIN);
 	DDR_SYNC |= _BV(SYNC_PIN);
 	PORT_VID &= ~_BV(VID_PIN);
 	PORT_SYNC |= _BV(SYNC_PIN);
 	DDR_SND |= _BV(SND_PIN);	// for tone generation.
 
-    // vertical syn is not critical from timing
-    // to have flexibilty in pin and IRQ usage,
-    // this is passed to top application to provide
-    // a call on vsync IRQ on falling edge.
-    // simply by PCI lib
-    // example:
-    // PCintPort::attachInterrupt(vsync_in,display.vsync_handle ,FALLING);
-
-    display.vsync_handle=&vertical_handle;   // pass to external pin ISR
-    // to full video clock setup
-    start_internal_clock();
-    display.clock_source=CLOCK_INTERN;   // current clock
-}
-
+	// inverted fast pwm mode on timer 1
+	TCCR1A = _BV(COM1A1) | _BV(COM1A0) | _BV(WGM11);
+	TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10);
 
-void setup_video_timing()
-{
-	if (display.video_mode) {
+	if (mode) {
 		display.start_render = _PAL_LINE_MID - ((display.vres * (display.vscale_const+1))/2);
 		display.output_delay = _PAL_CYCLES_OUTPUT_START;
 		display.vsync_end = _PAL_LINE_STOP_VSYNC;
@@ -128,87 +132,33 @@ void setup_video_timing()
 	}
 	display.scanLine = display.lines_frame+1;
 	line_handler = &vsync_line;
-}
-
-void start_internal_clock()
-{
-	// inverted fast pwm mode on timer 1
-	TCCR1A = _BV(COM1A1) | _BV(COM1A0) | _BV(WGM11);
-	TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10);
-	// all timing and video timing stuff
-    setup_video_timing();
-    // start timer
 	TIMSK1 = _BV(TOIE1);
-    // set state
-    display.clock_source=CLOCK_INTERN;
-}
-void start_external_clock()
-{
-    // disable timer1 for free running video
-    TCCR1A = 0;
-    TIMSK1 = 0;
-    // all timing and video timing stuff (Timer1 Stuff is not required)
-    setup_video_timing();
-
-     // Enable high speed edge detect on Pin D8.
-     //ICES0 is set to 0 for falling edge detection on input capture pin.
-    TCCR1B = _BV(CS10);
-	TIMSK1 = _BV(TOIE1);
-    // Enable input capture interrupt
-    TIMSK1 |= _BV(ICIE1);
-    // set state
-    display.clock_source=CLOCK_EXTERN;
-}
-// clock selector
-// MUST do full init of timing generator and video counters
-void select_clock(uint8_t mode)
-{
-    cli();
-    if(mode != display.clock_source) // action only on demand
-    {
-        if(mode)
-        {
-            start_external_clock();
-        }
-        else
-        {
-            start_internal_clock();
-        }
-    }
     sei();
 }
 
-// ISR function for vertical handline, only required for exernal vsync
-void vertical_handle() {
-    if(display.clock_source) // externa vsync ONLY if required
-    {
-        display.scanLine = 0;
-    }
-}
-
-// render a line based on timer (free running)
+// render a line
 ISR(TIMER1_OVF_vect) {
-    // original TVOUT handler
  	hbi_hook();
 	line_handler();
-    if(!display.clock_source)
-    {
-
-    }
 }
 
-// render a line based on external sync signal
-ISR(TIMER1_CAPT_vect) {
-    TCNT1 -= ICR1;
- 	hbi_hook();
-	line_handler();
-}
-
-// regular render code
 void blank_line() {
 
 	if ( display.scanLine == display.start_render) {
 		renderLine = 0;
+
+		// BEGIN Video Experimenter
+		if (captureFlag == 1) { // frame capture requested
+		  captureFlag = 2; // capturing
+		  render_line = &capture_line5c;
+		} else {
+		  if (captureFlag == 2) {
+		    captureFlag = 0; // capture done
+		    render_line = &empty;
+		  }
+		}
+		// END Video Experimenter
+
 		display.vscale = display.vscale_const;
 		line_handler = &active_line;
 	}
@@ -217,6 +167,18 @@ void blank_line() {
 		vbi_hook();
 	}
 
+	// BEGIN Video Experimenter
+	// odd capture (odd/even is HIGH)
+	//if ((display.scanLine == dataCaptureLine) && ((PINB & 0x4) > 0)) {
+
+	// even capture (odd/even is LOW)
+	//if ((display.scanLine == dataCaptureLine) && ((PINB & 0x4) == 0)) {
+	if ((dataCaptureBuf != 0) && (display.scanLine == dataCaptureLine)) {
+	  render_line = &dataCapture_line5c;
+	  wait_until(dataCaptureWait);
+	  render_line();
+	  render_line = save_render_line;
+	}
 	display.scanLine++;
 }
 
@@ -549,3 +511,182 @@ void render_line3c() {
 	);
 	#endif
 }
+
+// BEGIN Video Experimenter
+ISR(TIMER1_CAPT_vect) {
+  TCNT1 -= ICR1;
+  hbi_hook();
+  line_handler();
+}
+
+/*
+ISR(INT0_vect) {
+  display.scanLine = 0;
+}
+*/
+// Render a line based on the analog comparator output instead of display memory
+void renderACO_line5c() {
+	__asm__ __volatile__ (
+  	        "delay2\n\t" // replaces ADD and ADC
+		//save PORTB
+		"svprt	%[port]\n\t"
+		
+		"rjmp	enterACO5\n"
+	"loopACO5:\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"			
+		"bst	__tmp_reg__,5\n\t"			
+		"o1bs	%[port]\n"
+	"enterACO5:\n\t"
+		"delay1\n\t"                                            //1
+		"in     __tmp_reg__,%[acsr]\n\t"
+		"bst	__tmp_reg__,5\n\t"
+		"o1bs	%[port]\n\t"
+		"delay1\n\t"						//2
+		"in     __tmp_reg__,%[acsr]\n\t"
+		"bst	__tmp_reg__,5\n\t"
+		"o1bs	%[port]\n\t"
+		"delay1\n\t"						//3
+		"in     __tmp_reg__,%[acsr]\n\t"
+		"bst	__tmp_reg__,5\n\t"
+		"o1bs	%[port]\n\t"
+		"delay1\n\t"						//4
+		"in     __tmp_reg__,%[acsr]\n\t"
+		"bst	__tmp_reg__,5\n\t"
+		"o1bs	%[port]\n\t"
+		"delay1\n\t"						//5
+		"in     __tmp_reg__,%[acsr]\n\t"
+		"bst	__tmp_reg__,5\n\t"
+		"o1bs	%[port]\n\t"
+		"delay1\n\t"						//6
+		"in     __tmp_reg__,%[acsr]\n\t"
+		"bst	__tmp_reg__,5\n\t"
+		"o1bs	%[port]\n\t"
+		"dec	%[hres]\n\t"                                    //7
+		"in     __tmp_reg__,%[acsr]\n\t"
+		"bst	__tmp_reg__,5\n\t"
+		"o1bs	%[port]\n\t"
+		"brne	loopACO5\n\t"					//8
+		"in     __tmp_reg__,%[acsr]\n\t"
+		"bst	__tmp_reg__,5\n\t"			
+		"o1bs	%[port]\n"
+		
+		"svprt	%[port]\n\t"
+		BST_HWS
+		"o1bs	%[port]\n\t"
+		:
+		: [port] "i" (_SFR_IO_ADDR(PORT_VID)),
+		[acsr] "i" (_SFR_IO_ADDR(ACSR)),
+		[hres] "d" (display.hres)
+		: "r16" // try to remove this clobber later...
+	);
+}
+
+// Capture a line using the analog comparator output and store the data in the display memory
+void capture_line5c() {
+	__asm__ __volatile__ (
+		"ADD	r26,r28\n\t"
+		"ADC	r27,r29\n\t"
+		"rjmp	entercapture5\n"
+	"loopcapture5:\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"                       //8
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,0\n\t"
+		"st     X+,r16\n\t"
+	"entercapture5:\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"                        //1
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,7\n\t"
+		"delay2\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"			//2
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,6\n\t"
+		"delay2\n\t"						
+		"in     __tmp_reg__,%[acsr]\n\t"			//3
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,5\n\t"
+		"delay2\n\t"						
+		"in     __tmp_reg__,%[acsr]\n\t"			//4
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,4\n\t"
+		"delay2\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"			//5
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,3\n\t"
+		"delay2\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"			//6
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,2\n\t"
+		"delay1\n\t"						
+		"dec	%[hres]\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"			//7
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,1\n\t"
+		"brne	loopcapture5\n\t"			
+		"delay1\n\t"						
+		"in     __tmp_reg__,%[acsr]\n\t"			//8
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,0\n\t"
+		"st     X,r16\n\t"
+		:
+		: [acsr] "i" (_SFR_IO_ADDR(ACSR)),
+		"x" (display.screen),
+		"y" (renderLine),
+		[hres] "d" (display.hres)
+		: "r16" // try to remove this clobber later...
+	);
+}
+
+// Capture a line using the analog comparator output and store the data in
+// the data capture buffer
+void dataCapture_line5c() {
+	__asm__ __volatile__ (
+		"rjmp	enterdcapture5\n"
+	"loopdcapture5:\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"                       //8
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,0\n\t"
+		"st     X+,r16\n\t"
+	"enterdcapture5:\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"                        //1
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,7\n\t"
+		"delay2\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"			//2
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,6\n\t"
+		"delay2\n\t"						
+		"in     __tmp_reg__,%[acsr]\n\t"			//3
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,5\n\t"
+		"delay2\n\t"						
+		"in     __tmp_reg__,%[acsr]\n\t"			//4
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,4\n\t"
+		"delay2\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"			//5
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,3\n\t"
+		"delay2\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"			//6
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,2\n\t"
+		"delay1\n\t"						
+		"dec	%[hres]\n\t"
+		"in     __tmp_reg__,%[acsr]\n\t"			//7
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,1\n\t"
+		"brne	loopdcapture5\n\t"			
+		"delay1\n\t"						
+		"in     __tmp_reg__,%[acsr]\n\t"			//8
+		"bst	__tmp_reg__,5\n\t"
+		"bld	r16,0\n\t"
+		"st     X,r16\n\t"
+		:
+		: [acsr] "i" (_SFR_IO_ADDR(ACSR)),
+		"x" (dataCaptureBuf),
+		[hres] "d" (display.hres)
+		: "r16" // try to remove this clobber later...
+	);
+}
+
+// END Video Experimenter
diff -BburpN libraries/TVout/video_gen.h TVout-VE/TVout/video_gen.h
--- libraries/TVout/video_gen.h	2015-11-01 20:07:22.123720979 +0500
+++ TVout-VE/TVout/video_gen.h	2010-12-29 21:15:52.000000000 +0500
@@ -38,26 +38,19 @@ typedef struct {
 	char vscale;			//combine me too.
 	char vsync_end;			//remove me
 	uint8_t * screen;
-    uint8_t enable_genlock;
-    uint8_t clock_source;   // 0=intenr 1=extern
-    uint8_t video_mode;     // keeps current video mode
-    void (*vsync_handle)();   // must be triggered on edge of vsync
 } TVout_vid;
 
 extern TVout_vid display;
 
 extern void (*hbi_hook)();
 extern void (*vbi_hook)();
-// genlock and video clock functions
-#define CLOCK_INTERN            0
-#define CLOCK_EXTERN            1
-void start_internal_clock();
-void start_extermal_clock();
-void select_clock(uint8_t mode);
-
-void vertical_handle();
-
 
+// BEGIN: Video Experimenter
+extern volatile char captureFlag;
+extern int dataCaptureLine;
+extern int dataCaptureWait;
+extern uint8_t * dataCaptureBuf;
+// END: Video Experimenter
 
 void render_setup(uint8_t mode, uint8_t x, uint8_t y, uint8_t *scrnptr);
 
@@ -74,5 +67,13 @@ void render_line6c();
 void render_line5c();
 void render_line4c();
 void render_line3c();
+
+// BEGIN Video Experimenter
+void renderACO_line5c();
+void capture_line5c();
+void dataCapture_line5c();
+void resume_render();
+// END: Video Experimenter
+
 static void inline wait_until(uint8_t time);
 #endif
diff -BburpN libraries/TVoutfonts/font4x6.cpp TVout-VE/TVoutfonts/font4x6.cpp
--- libraries/TVoutfonts/font4x6.cpp	2015-11-01 20:07:22.123720979 +0500
+++ TVout-VE/TVoutfonts/font4x6.cpp	2011-04-28 00:22:08.000000000 +0600
@@ -105,7 +105,7 @@ PROGMEM const unsigned char font4x6[] =
 0b00000000,
 0b00000000,
 0b00000000,
-0b10000000,
+0b01000000,
 0b00000000,
 // /
 0b00100000,
@@ -123,10 +123,10 @@ PROGMEM const unsigned char font4x6[] =
 0b00000000,
 //1
 0b01000000,
-0b11000000,
 0b01000000,
 0b01000000,
-0b11100000,
+0b01000000,
+0b01000000,
 0b00000000,
 //2
 0b11100000,
@@ -154,10 +154,10 @@ PROGMEM const unsigned char font4x6[] =
 0b10000000,
 0b11100000,
 0b00100000,
-0b11000000,
+0b11100000,
 0b00000000,
 //6
-0b11000000,
+0b11100000,
 0b10000000,
 0b11100000,
 0b10100000,
@@ -166,10 +166,10 @@ PROGMEM const unsigned char font4x6[] =
 //7
 0b11100000,
 0b00100000,
-0b01000000,
-0b10000000,
-0b10000000,
-0b00000000,
+0b00100000,
+0b00100000,
+0b00100000,
+0b0000000,
 //8
 0b11100000,
 0b10100000,
@@ -182,7 +182,7 @@ PROGMEM const unsigned char font4x6[] =
 0b10100000,
 0b11100000,
 0b00100000,
-0b01100000,
+0b11100000,
 0b00000000,
 //:
 0b00000000,
@@ -325,10 +325,10 @@ PROGMEM const unsigned char font4x6[] =
 0b10100000,
 0b00000000,
 //N
-0b11000000,
-0b10100000,
 0b10100000,
 0b10100000,
+0b11100000,
+0b11100000,
 0b10100000,
 0b00000000,
 //O
