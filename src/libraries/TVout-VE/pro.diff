diff -BburpN beta1/readme.txt libraries/readme.txt
--- beta1/readme.txt	1970-01-01 05:00:00.000000000 +0500
+++ libraries/readme.txt	2015-11-01 20:07:22.123720979 +0500
@@ -0,0 +1,5 @@
+The TVOUT lib has been imported from TVoutBeta1.zip
+
+The modification to support Genlock is done in this project and trackt withing the repository
+
+Marko Hoepken 1/2015
\ В конце файла нет новой строки
diff -BburpN beta1/TVout/TVout.cpp libraries/TVout/TVout.cpp
--- beta1/TVout/TVout.cpp	2010-11-28 22:56:24.000000000 +0500
+++ libraries/TVout/TVout.cpp	2015-11-01 20:07:22.121720976 +0500
@@ -97,6 +97,18 @@ char TVout::begin(uint8_t mode, uint8_t
 	TIMSK1 = 0;
 	free(screen);
 }
+/* Enable genlock
+*/
+void TVout::genlock() {
+    display.enable_genlock=0;
+}
+
+/* Select video clock
+*/
+void TVout::video_clock(uint8_t mode) {
+    select_clock(mode);
+}
+
 
 
 /* Fill the screen with some color.
@@ -118,7 +130,7 @@ void TVout::fill(uint8_t color) {
 			cursor_x = 0;
 			cursor_y = 0;
 			for (int i = 0; i < (display.hres)*display.vres; i++)
-				display.screen[i] = 0xFF;
+				display.screen[i] = 0xAA;
 			break;
 		case INVERT:
 			for (int i = 0; i < display.hres*display.vres; i++)
diff -BburpN beta1/TVout/TVout.h libraries/TVout/TVout.h
--- beta1/TVout/TVout.h	2010-11-28 22:52:02.000000000 +0500
+++ libraries/TVout/TVout.h	2015-11-01 20:07:22.122720977 +0500
@@ -76,6 +76,8 @@ public:
 	char begin(uint8_t mode);
 	char begin(uint8_t mode, uint8_t x, uint8_t y);
 	void end();
+    void genlock();
+    void video_clock(uint8_t mode);
 	
 	//accessor functions
 	unsigned char hres();
diff -BburpN beta1/TVout/video_gen.cpp libraries/TVout/video_gen.cpp
--- beta1/TVout/video_gen.cpp	2010-11-25 21:22:50.000000000 +0500
+++ libraries/TVout/video_gen.cpp	2015-11-01 20:07:22.123720979 +0500
@@ -54,6 +54,7 @@ void render_setup(uint8_t mode, uint8_t
 	display.hres = x;
 	display.vres = y;
 	display.frames = 0;
+    display.video_mode=mode;
 	
 	if (mode)
 		display.vscale_const = _PAL_LINE_DISPLAY/display.vres - 1;
@@ -85,18 +86,31 @@ void render_setup(uint8_t mode, uint8_t
 				render_line = &render_line3c;
 	}
 	
-
+    // Pin setup
 	DDR_VID |= _BV(VID_PIN);
 	DDR_SYNC |= _BV(SYNC_PIN);
 	PORT_VID &= ~_BV(VID_PIN);
 	PORT_SYNC |= _BV(SYNC_PIN);
 	DDR_SND |= _BV(SND_PIN);	// for tone generation.
 	
-	// inverted fast pwm mode on timer 1
-	TCCR1A = _BV(COM1A1) | _BV(COM1A0) | _BV(WGM11);
-	TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10);
+    // vertical syn is not critical from timing
+    // to have flexibilty in pin and IRQ usage,
+    // this is passed to top application to provide
+    // a call on vsync IRQ on falling edge.
+    // simply by PCI lib
+    // example:
+    // PCintPort::attachInterrupt(vsync_in,display.vsync_handle ,FALLING);
+
+    display.vsync_handle=&vertical_handle;   // pass to external pin ISR
+    // to full video clock setup
+    start_internal_clock();
+    display.clock_source=CLOCK_INTERN;   // current clock
+}
 	
-	if (mode) {
+
+void setup_video_timing()
+{
+	if (display.video_mode) {
 		display.start_render = _PAL_LINE_MID - ((display.vres * (display.vscale_const+1))/2);
 		display.output_delay = _PAL_CYCLES_OUTPUT_START;
 		display.vsync_end = _PAL_LINE_STOP_VSYNC;
@@ -114,16 +128,83 @@ void render_setup(uint8_t mode, uint8_t
 	}
 	display.scanLine = display.lines_frame+1;
 	line_handler = &vsync_line;
+}
+
+void start_internal_clock()
+{
+	// inverted fast pwm mode on timer 1
+	TCCR1A = _BV(COM1A1) | _BV(COM1A0) | _BV(WGM11);
+	TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10);
+	// all timing and video timing stuff
+    setup_video_timing();
+    // start timer
+	TIMSK1 = _BV(TOIE1);
+    // set state
+    display.clock_source=CLOCK_INTERN;
+}
+void start_external_clock()
+{
+    // disable timer1 for free running video
+    TCCR1A = 0;
+    TIMSK1 = 0;
+    // all timing and video timing stuff (Timer1 Stuff is not required)
+    setup_video_timing();
+
+     // Enable high speed edge detect on Pin D8.
+     //ICES0 is set to 0 for falling edge detection on input capture pin.
+    TCCR1B = _BV(CS10);
 	TIMSK1 = _BV(TOIE1);
+    // Enable input capture interrupt
+    TIMSK1 |= _BV(ICIE1);
+    // set state
+    display.clock_source=CLOCK_EXTERN;
+}
+// clock selector
+// MUST do full init of timing generator and video counters
+void select_clock(uint8_t mode)
+{
+    cli();
+    if(mode != display.clock_source) // action only on demand
+    {
+        if(mode)
+        {
+            start_external_clock();
+        }
+        else
+        {
+            start_internal_clock();
+        }
+    }
 	sei();
 }
 
-// render a line
+// ISR function for vertical handline, only required for exernal vsync
+void vertical_handle() {
+    if(display.clock_source) // externa vsync ONLY if required
+    {
+        display.scanLine = 0;
+    }
+}
+
+// render a line based on timer (free running)
 ISR(TIMER1_OVF_vect) {
+    // original TVOUT handler
+ 	hbi_hook();
+	line_handler();
+    if(!display.clock_source)
+    {
+
+    }
+}
+
+// render a line based on external sync signal
+ISR(TIMER1_CAPT_vect) {
+    TCNT1 -= ICR1;
 	hbi_hook();
 	line_handler();
 }
 
+// regular render code
 void blank_line() {
 		
 	if ( display.scanLine == display.start_render) {
diff -BburpN beta1/TVout/video_gen.h libraries/TVout/video_gen.h
--- beta1/TVout/video_gen.h	2010-11-11 22:05:30.000000000 +0500
+++ libraries/TVout/video_gen.h	2015-11-01 20:07:22.123720979 +0500
@@ -38,12 +38,26 @@ typedef struct {
 	char vscale;			//combine me too.
 	char vsync_end;			//remove me
 	uint8_t * screen;
+    uint8_t enable_genlock;
+    uint8_t clock_source;   // 0=intenr 1=extern
+    uint8_t video_mode;     // keeps current video mode
+    void (*vsync_handle)();   // must be triggered on edge of vsync
 } TVout_vid;
 
 extern TVout_vid display;
 
 extern void (*hbi_hook)();
 extern void (*vbi_hook)();
+// genlock and video clock functions
+#define CLOCK_INTERN            0
+#define CLOCK_EXTERN            1
+void start_internal_clock();
+void start_extermal_clock();
+void select_clock(uint8_t mode);
+
+void vertical_handle();
+
+
 
 void render_setup(uint8_t mode, uint8_t x, uint8_t y, uint8_t *scrnptr);
 
